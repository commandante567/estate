var React = require('react');var FlatServerActionCreators = require('../actions/FlatServerActionCreators.jsx'); 	function SortByName(x,y) {      return ((x.name == y.name) ? 0 : ((x.name > y.name) ? 1 : -1 ));    }function metroList() {    var list =     [    { id:1, name: 'Девяткино', line:'1'},    { id:2,name: 'Гражданский проспект', line:'1'},    { id:3,name: 'Академическая', line:'1'},    { id:4,name: 'Политехническая', line:'1'},    { id:5,name: 'Площадь Мужества', line:'1'},    { id:6,name: 'Лесная', line:'1'},    { id:7,name: 'Выборгская', line:'1'},    { id:8,name: 'Площадь Ленина', line:'1'},    { id:9,name: 'Чернышевская', line:'1'},    { id:10,name: 'Площадь Восстания', line:'1'},    { id:11,name: 'Владимирская', line:'1'},    { id:12,name: 'Пушкинская', line:'1'},    { id:13,name: 'Технологический институт', line:'1'},    { id:14,name: 'Балтийская', line:'1'},    { id:15 ,name: 'Нарвская', line:'1'},    { id:16 ,name: 'Кировский завод', line:'1'},    { id:17 ,name: 'Автово', line:'1'},    { id:18 ,name: 'Ленинский проспект', line:'1'},    { id:19 ,name: 'Проспект Ветеранов', line:'1'},    { id:20 ,name: 'Парнас', line:'2'},    { id:21 ,name: 'Проспект Просвещения', line:'2'},    { id:22 ,name: 'Озерки', line:'2'},    { id:23 ,name: 'Удельная', line:'2'},    { id:24 ,name: 'Пионерская', line:'2'},    { id:25 ,name: 'Чёрная речка', line:'2'},    { id:26 ,name: 'Петроградская', line:'2'},    { id:27 ,name: 'Горьковская', line:'2'},    { id:28 ,name: 'Невский проспект', line:'2'},    { id:29 ,name: 'Сенная площадь', line:'2'},    { id:30 ,name: 'Технологический институт', line:'2'},    { id:31 ,name: 'Фрунзенская', line:'2'},    { id:32 ,name: 'Московские ворота', line:'2'},    { id:33 ,name: 'Электросила', line:'2'},    { id:34 ,name: 'Парк Победы', line:'2'},    { id:35 ,name: 'Московская', line:'2'},    { id:36 ,name: 'Звёздная', line:'2'},    { id:37 ,name: 'Купчино', line:'2'},    { id:38 ,name: 'Приморская', line:'3'},    { id:39 ,name: 'Василеостровская', line:'3'},    { id:40 ,name: 'Гостиный двор', line:'3'},    { id:41 ,name: 'Маяковская', line:'3'},    { id:42 ,name: 'Площадь Александра Невского', line:'3'},    { id:43 ,name: 'Елизаровская', line:'3'},    { id:44 ,name: 'Ломоносовская', line:'3'},    { id:45 ,name: 'Пролетарская', line:'3'},    { id:46 ,name: 'Обухово', line:'3'},    { id:47 ,name: 'Рыбацкое', line:'3'},    { id:48 ,name: 'Спасская', line:'4'},    { id:49 ,name: 'Достоевская', line:'4'},    { id:50 ,name: 'Лиговский проспект', line:'4'},    { id:51 ,name: 'Площадь Александра Невского', line:'4'},    { id:52 ,name: 'Новочеркасская', line:'4'},    { id:53 ,name: 'Ладожская', line:'4'},    { id:54 ,name: 'Проспект Большевиков', line:'4'},    { id:55 ,name: 'Улица Дыбенко', line:'4'},    { id:56 ,name: 'Комендантский проспект', line:'5'},    { id:57 ,name: 'Старая Деревня', line:'5'},    { id:58 ,name: 'Крестовский остров', line:'5'},    { id:59 ,name: 'Чкаловская', line:'5'},    { id:60 ,name: 'Спортивная', line:'5'},    { id:61 ,name: 'Адмиралтейская', line:'5'},    { id:62 ,name: 'Садовая', line:'5'},    { id:63 ,name: 'Звенигородская', line:'5'},    { id:64 ,name: 'Обводный канал', line:'5'},    { id:65 ,name: 'Волковская', line:'5'},    { id:66 ,name: 'Бухарестская', line:'5'},    { id:67 ,name: 'Международная', line:'5'}    ]    ;    return list.sort(SortByName);}function optionsRegen(min, max){        var minSelect = document.getElementById('min_select');        var maxSelect = document.getElementById('max_select');        for(i=min; i<max; i += 5000) {           minSelect.options[minSelect.options.length] = new Option( i , i);             }        for(i=max; i>min; i -=5000) {           maxSelect.options[maxSelect.options.length] = new Option( i , i);             }    } var FlatsForm = React.createClass({    getInitialState:function() {        return {max_price:100000, min_price:5000, road:'',room:[],type:'all',searchString:'' }    },    componentDidMount: function(){        var minprice = parseInt(this.state.min_price);        var maxprice = parseInt(this.state.max_price);        optionsRegen(minprice,maxprice);        var childLi = document.getElementById('type_ul').childNodes;        childLi[2].className = 'active';                },    componentWillUnmount: function() {                },    render: function() {        var rooms = [{id:1, val:1},{id:2, val:2}, {id:3, val:3}, {id:4, val:4}];        var roomsUl = rooms.map(function(room){                return <li className="room_li"  key={room.id}><a href="#" key={room.id} data-room={room.val} onClick={this._handleRoom}>{room.val}</a></li>             }.bind(this));        var types = [{id:1, data:'room', val:'Комнаты'}, {id:2, data:'flat', val:'Квартиры'}, {id:3, data:'all', val:'Все'}];        var typesUl = types.map(function(type){                return <li className="type_li" key={type.id}><a key={type.id} data-type={type.data} onClick={this._handleType} href="#">{type.val}</a></li>            }.bind(this));        if(this.state.searchString.length > 0) {                        var libraries = metroList().filter(function(l){                var answer = l.name.toLowerCase().match( this.state.searchString);                    return answer;            }.bind(this));            } else {                            var libraries = metroList();        }        var autoComplete = libraries.map(function(l){                return <li className="auto_li" key={l.id}><a key={l.id} data-road={l.name} onClick={this._handleRoad} href="#">{l.name}</a></li>            }.bind(this));        return (            <div className="flat-form cf">                <div className="form-control-adress" onFocus={this._handleAutoFocus} onBlur={this._handleAutoBlur}  >                  <input type="text" id="adress" onChange={this._handleAutoComplete} autoComplete="off" placeholder="Введите станцию метро" value={this.state.searchString}/>                  <a className="clear-road" onClick={this._handleClearRoad} href="#">x</a>                  <div className="auto-box hidden" id="auto-box">                      <ul>                        {autoComplete}                      </ul>                  </div>                </div>                <div className="form-control-rooms form-control">                  <div className="form-label">                    <h5>Комнаты</h5>                  </div>                  <ul className="inline-list rooms-list">                    {roomsUl}                  </ul>                </div>                <div className="form-control-type form-control">                  <div className="form-label">                    <h5>Обьект</h5>                  </div>                  <ul className="inline-list type-list" id="type_ul">                    {typesUl}                  </ul>                </div>                <div className="form-control-price form-control cf">                    <div className="price-item">                       <h5>Цена</h5>                     </div>                    <div className="price-item">                        <span>От</span>                        <select id="min_select" onChange={this._handleMinPrice}>                        </select>                    </div>                    <div className="price-item">                        <span>До</span>                        <select id="max_select" onChange={this._handleMaxPrice}>                        </select>                    </div>                </div>          </div>        );                },    _handleRoad: function(event) {        event.preventDefault();                this.setState({road:event.target.getAttribute('data-road'), searchString:event.target.getAttribute('data-road')}, function(){                FlatServerActionCreators.searchFlat(this.state);                var autoBox = document.getElementById('auto-box');                autoBox.className = 'hidden';            });        },    _handleAutoFocus: function(event) {        event.preventDefault();            var autoBox = document.getElementById('auto-box');            autoBox.className = 'auto-box';        },    _handleAutoBlur: function(event) {        event.preventDefault();            var autoBox = document.getElementById('auto-box');            autoBox.className = 'hidden';    },    _handleClearRoad: function(event) {        event.preventDefault();        if(this.state.road != '') {            this.setState({road:'', searchString:''}, function(){                    FlatServerActionCreators.searchFlat(this.state);                    var autoBox = document.getElementById('auto-box');                    autoBox.className = 'hidden';                });        } else {                        }        },    _handleAutoComplete: function(event) {        event.preventDefault();        var searchString = event.target.value.trim().toLowerCase();        this.setState({searchString:searchString}, function(){            })        },    _handleMinPrice: function(event) {        event.preventDefault();                this.setState({min_price:event.target.value}, function(){            FlatServerActionCreators.searchFlat(this.state);            });        },    _handleMaxPrice: function(event) {        this.setState({max_price:event.target.value}, function(){            FlatServerActionCreators.searchFlat(this.state);            });        },    _handleRoom: function(event) {        event.preventDefault();        var parentLi = event.target.parentNode;        if(parentLi.getAttribute('class') !== 'active') {                        parentLi.className="active";            this.state.room.push(event.target.getAttribute('data-room'));            FlatServerActionCreators.searchFlat(this.state);        } else {            parentLi.className="type_li";            var index = this.state.room.indexOf(event.target.getAttribute('data-room'));            if (index >= 0) {              this.state.room.splice( index, 1 );            }                        FlatServerActionCreators.searchFlat(this.state);        }    },    _handleType: function(event) {        event.preventDefault();        var parentLi = event.target.parentNode;                if(parentLi.getAttribute('class') !== 'active') {           var childLi = document.getElementById('type_ul').childNodes;            for(i=0; i<childLi.length; i++){                   childLi[i].className='type_li';               }           this.setState({type:event.target.getAttribute('data-type')}, function(){                parentLi.className='active';                FlatServerActionCreators.searchFlat(this.state);               });         } else {                    }    }    });module.exports = FlatsForm;