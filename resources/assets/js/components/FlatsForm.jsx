var React = require('react');var FlatServerActionCreators = require('../actions/FlatServerActionCreators.jsx')function optionsRegen(min, max){        var minSelect = document.getElementById('min_select');        var maxSelect = document.getElementById('max_select');        for(i=min; i<max; i += 5000) {           minSelect.options[minSelect.options.length] = new Option( i , i);             }        for(i=max; i>min; i -=5000) {           maxSelect.options[maxSelect.options.length] = new Option( i , i);             }    } var FlatsForm = React.createClass({    getInitialState:function() {        return {max_price:100000, min_price:5000, road:'',room:[],type:'all' }        },    componentDidMount: function(){        var minprice = parseInt(this.state.min_price);        var maxprice = parseInt(this.state.max_price);        optionsRegen(minprice,maxprice);        var childLi = document.getElementById('type_ul').childNodes;        childLi[2].className = 'active';                },    componentWillUnmount: function() {                },    render: function() {        var rooms = [{id:1, val:1},{id:2, val:2}, {id:3, val:3}, {id:4, val:4}];        var roomsUl = rooms.map(function(room){                return <li className="room_li"  key={room.id}><a href="#" key={room.id} data-room={room.val} onClick={this._handleRoom}>{room.val}</a></li>             }.bind(this));        var types = [{id:1, data:'room', val:'Комнаты'}, {id:2, data:'flat', val:'Квартиры'}, {id:3, data:'all', val:'Все'}];        var typesUl = types.map(function(type){                return <li className="type_li" key={type.id}><a key={type.id} data-type={type.data} onClick={this._handleType} href="#">{type.val}</a></li>            }.bind(this));        return (            <div className="flat-form cf">                <form action="">                <div className="form-control-adress ">                  <input type="text" id="adress" onChange={this._handleRoad} placeholder="Введите станцию метро"/>                </div>                <div className="form-control-rooms form-control">                  <div className="form-label">                    <h5>Комнаты</h5>                  </div>                  <ul className="inline-list rooms-list">                    {roomsUl}                  </ul>                </div>                <div className="form-control-type form-control">                  <div className="form-label">                    <h5>Обьект</h5>                  </div>                  <ul className="inline-list type-list" id="type_ul">                    {typesUl}                  </ul>                </div>                <div className="form-control-price form-control cf">                    <div className="price-item">                       <h5>Цена</h5>                     </div>                    <div className="price-item">                        <span>От</span>                        <select id="min_select" onChange={this._handleMinPrice}>                        </select>                    </div>                    <div className="price-item">                        <span>До</span>                        <select id="max_select" onChange={this._handleMaxPrice}>                        </select>                    </div>                </div>              </form>          </div>        );                },    _handleRoad: function(event) {        event.preventDefault();                this.setState({road:event.target.value}, function(){            FlatServerActionCreators.searchFlat(this.state);            });        },    _handleMinPrice: function(event) {        event.preventDefault();                this.setState({min_price:event.target.value}, function(){            FlatServerActionCreators.searchFlat(this.state);            });        },    _handleMaxPrice: function(event) {        this.setState({max_price:event.target.value}, function(){            FlatServerActionCreators.searchFlat(this.state);            });        },    _handleRoom: function(event) {        event.preventDefault();        var parentLi = event.target.parentNode;        if(parentLi.getAttribute('class') !== 'active') {                        parentLi.className="active";            this.state.room.push(event.target.getAttribute('data-room'));            FlatServerActionCreators.searchFlat(this.state);        } else {            parentLi.className="type_li";            var index = this.state.room.indexOf(event.target.getAttribute('data-room'));            if (index >= 0) {              this.state.room.splice( index, 1 );            }                        FlatServerActionCreators.searchFlat(this.state);        }    },    _handleType: function(event) {        event.preventDefault();        var parentLi = event.target.parentNode;                if(parentLi.getAttribute('class') !== 'active') {           var childLi = document.getElementById('type_ul').childNodes;            for(i=0; i<childLi.length; i++){                   childLi[i].className='type_li';               }           this.setState({type:event.target.getAttribute('data-type')}, function(){                parentLi.className='active';                FlatServerActionCreators.searchFlat(this.state);                console.log(this.state);               });         } else {                    }    }    });module.exports = FlatsForm;